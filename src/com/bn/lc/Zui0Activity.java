package com.bn.lc;
import android.app.Activity;
import android.os.Bundle;
import android.util.Log;
import android.view.WindowManager;

import com.amap.api.location.AMapLocation;
import com.amap.api.location.AMapLocationClient;
import com.amap.api.location.AMapLocationClientOption;
import com.amap.api.location.AMapLocationClientOption.AMapLocationMode;
import com.amap.api.location.AMapLocationListener;
import com.amap.api.maps.AMap;
import com.amap.api.maps.LocationSource;
import com.amap.api.maps.MapView;
import com.amap.api.maps.model.BitmapDescriptor;
import com.amap.api.maps.model.MyLocationStyle;



public class Zui0Activity  extends Activity implements LocationSource, AMapLocationListener {
	private MapView mMapView;
	private AMap aMap;
	OnLocationChangedListener mListener;
	AMapLocationClient mlocationClient;
	AMapLocationClientOption mLocationOption;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		 setContentView(R.layout.mapvie_gaode);
		  
	        //全屏显示，即手机状态栏不可见
	/*        getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);*/
		    getWindow().setFlags
	        (
	     
	        		WindowManager.LayoutParams.FLAG_FULLSCREEN, 
	        		WindowManager.LayoutParams.FLAG_FULLSCREEN
	        );
		 mMapView = (MapView) findViewById(R.id.myamap_view);
		 //在activity执行onCreate时执行mMapView.onCreate(savedInstanceState)，创建地图
	    mMapView.onCreate(savedInstanceState);
	    
	    if (aMap == null) {
	        aMap = mMapView.getMap();        
	    }
	 // 设置定位监听
	    aMap.setLocationSource(this);
	    // 设置为true表示显示定位层并可触发定位，false表示隐藏定位层并不可触发定位，默认是false
	    aMap.setMyLocationEnabled(true);
	    // 设置定位的类型为定位模式，有定位、跟随或地图根据面向方向旋转几种
	    aMap.setMyLocationType(AMap.LOCATION_TYPE_LOCATE);
	
	 
	}
	  @Override
	  protected void onDestroy() {
	    super.onDestroy();
	    //在activity执行onDestroy时执行mMapView.onDestroy()，销毁地图
	    mMapView.onDestroy();	    
	    if(null != mlocationClient){
	        mlocationClient.onDestroy();
	    }
	  
	  }
	 @Override
	 protected void onResume() {
	    super.onResume();
	    //在activity执行onResume时执行mMapView.onResume ()，重新绘制加载地图
	    mMapView.onResume();
	    }
	 @Override
	 protected void onPause() {
	    super.onPause();
	    //在activity执行onPause时执行mMapView.onPause ()，暂停地图的绘制
	    mMapView.onPause();
	    }
	 @Override
	 protected void onSaveInstanceState(Bundle outState) {
	    super.onSaveInstanceState(outState);
	    //在activity执行onSaveInstanceState时执行mMapView.onSaveInstanceState (outState)，保存地图当前的状态
	    mMapView.onSaveInstanceState(outState);
	  }
/**
	  * 激活定位
	  */
	 @Override
	 public void activate(OnLocationChangedListener listener) {
	     mListener = listener;
	     if (mlocationClient == null) {
	         //初始化定位
	         mlocationClient = new AMapLocationClient(this);
	         //初始化定位参数
	         mLocationOption = new AMapLocationClientOption();
	         //设置定位回调监听
	         mlocationClient.setLocationListener(this);
	         //设置为高精度定位模式
	         mLocationOption.setLocationMode(AMapLocationMode.Hight_Accuracy);
	         //设置定位参数
	         mlocationClient.setLocationOption(mLocationOption);
	         // 此方法为每隔固定时间会发起一次定位请求，为了减少电量消耗或网络流量消耗，
	         // 注意设置合适的定位时间的间隔（最小间隔支持为2000ms），并且在合适时间调用stopLocation()方法来取消定位请求
	         // 在定位结束后，在合适的生命周期调用onDestroy()方法
	         // 在单次定位情况下，定位无论成功与否，都无需调用stopLocation()方法移除请求，定位sdk内部会移除
	         mlocationClient.startLocation();//启动定位
	     }
	 }
	 /**
	  * 停止定位
	  */
	 @Override
	 public void deactivate() {
	     mListener = null;
	     if (mlocationClient != null) {
	         mlocationClient.stopLocation();
	         mlocationClient.onDestroy();
	     }
	     mlocationClient = null;
	 }
	 /**
	  定位成功后回调函数
	   **/
	 @Override
	 public void onLocationChanged(AMapLocation amapLocation) {
	     if (mListener != null&&amapLocation != null) {
	         if (amapLocation != null  &&amapLocation.getErrorCode() == 0) {
	             mListener.onLocationChanged(amapLocation);// 显示系统小蓝点
	         } else {
	             String errText = "定位失败," + amapLocation.getErrorCode()+ ": " + amapLocation.getErrorInfo();
	             Log.e("AmapErr",errText);
	         }
	     }
	 }
	}